import React, { useState } from "react";
import axios from "axios";

function ResetPassword() {
  const [email, setEmail] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post(
        "http://localhost:8080/api/auth/reset-password",
        {
          email,
          newPassword,
        }
      );

      setMessage(response.data);
      setEmail("");
      setNewPassword("");
    } catch (error) {
      setMessage("Failed to update password");
    }
  };

  return (
    <div>
      <h2>Reset Password</h2>

      <form onSubmit={handleSubmit}>
        <label>Email</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />

        <label>New Password</label>
        <input
          type="password"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
          required
        />

        <button type="submit">Reset</button>
      </form>

      {message && <p>{message}</p>}
    </div>
  );
}

export default ResetPassword;


try {
    setIsLoading(true);

    const response = await axios.post(
        "http://localhost:8080/api/auth/forgot-password",
        { email }
    );

    setMessage(response.data);

    // ✅ Move to reset password screen
    navigate("/reset-password");

} catch (error) {
    if (error.response && error.response.status === 400) {
        setMessage("Email not found in records");
    } else {
        setMessage("Something went wrong. Please try again.");
    }
} finally {
    setIsLoading(false);
}


@RestController
@RequestMapping("/api/auth")
public class ForgotPasswordController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EmailService emailService;

    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody ForgotPasswordRequest request) {

        Optional<User> userOptional = userRepository.findByEmail(request.getEmail());
        if (userOptional.isEmpty()) {
            return ResponseEntity.badRequest().body("Email not found in our records");
        }

        String resetLink = "http://localhost:3000/reset-password?email=" + request.getEmail();

        // ✅ Send Email
        emailService.sendEmail(
            request.getEmail(),
            "Password Reset Link",
            "Click the link to reset password: " + resetLink
        );

        return ResponseEntity.ok("Reset link sent successfully to your email!");
    }
}
