package com.scgbs.rwtool.controller;

import com.scgbs.rwtool.service.ForgotPasswordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/auth")
public class ForgotPasswordController {

    @Autowired
    private ForgotPasswordService forgotPasswordService;

    // Step 1: Send reset link to email
    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody Map<String, String> request) {
        String email = request.get("email");
        boolean success = forgotPasswordService.processForgotPassword(email);

        if (success) {
            return ResponseEntity.ok(Map.of("message", "Password reset link sent successfully!"));
        } else {
            return ResponseEntity.badRequest().body(Map.of("error", "User not found for email: " + email));
        }
    }
}


package com.scgbs.rwtool.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.scgbs.rwtool.model.User;
import com.scgbs.rwtool.model.PasswordResetToken;
import com.scgbs.rwtool.repository.UserRepository;
import com.scgbs.rwtool.repository.PasswordResetTokenRepository;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Service
public class ForgotPasswordService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordResetTokenRepository tokenRepository;

    public boolean processForgotPassword(String email) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isEmpty()) {
            return false; // user not found
        }

        User user = userOptional.get();

        // Generate token
        String token = UUID.randomUUID().toString();

        // Create token entity
        PasswordResetToken resetToken = new PasswordResetToken();
        resetToken.setToken(token);
        resetToken.setUser(user);
        resetToken.setExpiryDate(LocalDateTime.now().plusMinutes(15));

        // Save token
        tokenRepository.save(resetToken);

        // For now just print the reset link (you can later send email)
        System.out.println("ðŸ”— Password reset link: http://localhost:3000/reset-password?token=" + token);

        return true;
    }
}
