import React, { useState } from 'react';

// Assuming you have a function to navigate back to the login page (e.g., using react-router-dom)
// const navigate = useNavigate();

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Functionality: Handles the form submission and API call
  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setIsLoading(true);

    // --- API Call Simulation ---
    try {
      // 1. Placeholder for your API call (e.g., Axios or Fetch)
      //    const response = await fetch('/api/forgot-password', {
      //      method: 'POST',
      //      headers: { 'Content-Type': 'application/json' },
      //      body: JSON.stringify({ email })
      //    });

      // Simulate network delay and successful response
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // In a real application, you'd check response.ok and handle errors
      
      setMessage('üìß We\'ve sent a password reset link to your email. Check your inbox!');
      setEmail(''); // Clear input on success

    } catch (error) {
      console.error('Password reset request failed:', error);
      // Display a generic error message for security (don't confirm if the email exists or not)
      setMessage('‚ùå We couldn\'t process your request right now. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    // Centering the card using Bootstrap utilities
    <div className="d-flex align-items-center justify-content-center" style={{ minHeight: '100vh', padding: '20px' }}>
      <div className="card shadow-lg p-4" style={{ maxWidth: '450px', width: '100%' }}>
        <div className="card-body">
          {/* Standard Chartered Logo placeholder */}
          <div className="text-center mb-4">
             {/* Replace with your actual logo component or image */}
             <img src="/standard-chartered-logo.svg" alt="Standard Chartered" style={{ height: '40px' }} />
          </div>
          
          <h4 className="card-title text-center mb-3">Forgot Password</h4>
          <p className="text-center text-muted mb-4 small">
            Enter your account's email address and we will send you a reset link.
          </p>

          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label htmlFor="emailInput" className="form-label">Email Address</label>
              <input
                type="email"
                className="form-control"
                id="emailInput"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>

            {/* Message Display (Success/Error) */}
            {message && (
              <div className={`alert ${message.startsWith('üìß') ? 'alert-success' : 'alert-danger'} text-center`} role="alert">
                {message}
              </div>
            )}

            <button 
              type="submit" 
              className="btn btn-primary w-100" 
              disabled={isLoading || !email}
            >
              {isLoading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  Sending Link...
                </>
              ) : (
                'Send Reset Link'
              )}
            </button>
          </form>

          <div className="text-center mt-3">
            {/* Link back to the login page */}
            <a href="/login" className="text-decoration-none">
              Back to Login
            </a>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;

/*
 * Assuming your main application is set up to use Bootstrap's grid and utilities.
 * This CSS focuses on centering the card and adjusting some visual elements.
 */

/* 1. Container Styling: Ensures the content takes up the full screen height and centers the card */
.forgot-password-page {
    /* Use flexbox to center content both horizontally and vertically */
    display: flex;
    justify-content: center;
    align-items: center;
    /* Set minimum height to viewport height */
    min-height: 100vh;
    /* Add a subtle background color if needed, or leave it white/transparent */
    background-color: #f8f9fa; /* Light gray background */
}

/* 2. Card/Form Styling: Applies to the Bootstrap 'card' element */
.forgot-password-card {
    /* Set a fixed maximum width for a desktop-friendly view */
    max-width: 450px;
    width: 100%;
    /* Add padding and shadow as done by Bootstrap, but you can customize it */
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Slightly stronger shadow than default Bootstrap */
    background-color: #ffffff; /* White background for the card */
    border: none;
}

/* 3. Logo Styling */
.logo-container {
    text-align: center;
    margin-bottom: 25px;
}

.logo-container img {
    /* Standard Chartered Green from the image is often a darker cyan/teal */
    height: 40px; 
}

/* 4. Button Styling (Optional: to match the Standard Chartered blue) */
/* This will override the default Bootstrap blue */
.btn-primary-sc {
    background-color: #006b5b !important; /* A deep teal/cyan color */
    border-color: #006b5b !important;
    font-weight: 600;
    padding: 10px 15px;
    transition: background-color 0.3s;
}

.btn-primary-sc:hover {
    background-color: #005a4a !important; /* Slightly darker on hover */
    border-color: #005a4a !important;
}

/* 5. Input Focus Styling (Optional: to match branding focus color) */
.form-control:focus {
    border-color: #006b5b; /* Use the brand color for focus outline */
    box-shadow: 0 0 0 0.25rem rgba(0, 107, 91, 0.25);
}

/* 6. Message Styling (Success/Error) */
.alert-success {
    background-color: #e6f7f3; /* Light green-teal background */
    color: #006b5b; /* Dark text */
    border-color: #b3e6d8;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border-color: #f5c6cb;
}

package com.scgbs.rwtool.controller;

import com.scgbs.rwtool.dto.LoginRequest;
import com.scgbs.rwtool.dto.MessageResponse;
import com.scgbs.rwtool.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/auth") // Or whatever your base path is
public class AuthController {

    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);

    // Ensure this is Autowired correctly
    @Autowired 
    private UserService userService;

    // --- FIX 1: Correct @PostMapping annotation and method placement ---
    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody LoginRequest loginRequest) {
        // We only need the email from the LoginRequest DTO
        String email = loginRequest.getEmail(); 

        // --- Standard Security Response Message ---
        String genericSuccessMessage = "If an account with that email address exists, a password reset link has been sent.";

        if (email == null || email.trim().isEmpty()) {
            // Bad Request if no email is provided
            return ResponseEntity.badRequest().body(new MessageResponse("Email is required."));
        }

        try {
            // 1. Delegate the logic to the Service layer (now just the email)
            userService.initiatePasswordReset(email);
            
            // 2. Return a generic success response (HTTP 200 OK)
            return ResponseEntity.ok(new MessageResponse(genericSuccessMessage));

        } catch (Exception e) {
            // Log the internal server error
            logger.error("Password Reset Initiation failed for email: {}", email, e);
            
            // 3. Even on internal error, return the generic success message for security
            return ResponseEntity.ok(new MessageResponse(genericSuccessMessage));
        }
    }
    
    // ... other controller methods (login, register, etc.)
}



// Inside com.scgbs.rwtool.service.UserService.java

// ... imports (Ensure you use org.slf4j for Logger) ...
import org.springframework.security.crypto.password.PasswordEncoder;
import java.security.SecureRandom;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

@Service
public class UserService {
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

    @Autowired private UserRepository userRepository;
    @Autowired private PasswordEncoder passwordEncoder; // You should have this configured
    // @Autowired private EmailService emailService; // Placeholder for your email sender

    public void initiatePasswordReset(String email) throws Exception {
        
        Optional<User> userOptional = userRepository.findByEmail(email); 

        // CRITICAL SECURITY: Handle non-existent user silently
        if (userOptional.isEmpty()) {
            logger.warn("Password reset attempted for non-existent email: {}", email);
            return;
        }
        User user = userOptional.get();

        // 1. Generate a secure, unhashed token (used in the email link)
        String resetToken = generateSecureToken(); 
        
        // 2. Hash the token (used for storing in the database)
        String hashedToken = passwordEncoder.encode(resetToken);
        
        // 3. Set expiration (e.g., 1 hour from now)
        Instant expiryTime = Instant.now().plus(1, ChronoUnit.HOURS);

        // 4. Update the database (using the hashed token)
        userRepository.updateResetToken(user.getEmail(), hashedToken, expiryTime);

        // 5. Build the full reset URL (using the UNHASHED token)
        String resetUrl = "http://localhost:3000/reset-password?token=" + resetToken + "&email=" + user.getEmail();

        // 6. Send the email (Requires a configured EmailService/JavaMailSender)
        // emailService.sendResetEmail(user.getEmail(), resetUrl);
        
        logger.info("Password reset token generated and sent for user ID: {}", user.getId());
    }

    private String generateSecureToken() {
        SecureRandom secureRandom = new SecureRandom();
        byte[] tokenBytes = new byte[32]; // 32 bytes for a long, secure token
        secureRandom.nextBytes(tokenBytes);
        return bytesToHex(tokenBytes);
    }
    
    // Simple helper function to convert bytes to hex string
    private String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}



// Inside com.scgbs.rwtool.controller.AuthController.java

// ... imports ...

@RestController
@RequestMapping("/api/auth") 
public class AuthController {
    
    // ... logger and autowired UserService ...

    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody LoginRequest loginRequest) {
        
        String email = loginRequest.getEmail(); 
        String genericSuccessMessage = "If an account with that email address exists, a password reset link has been sent.";

        if (email == null || email.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("Email is required."));
        }

        try {
            userService.initiatePasswordReset(email);
            return ResponseEntity.ok(new MessageResponse(genericSuccessMessage));

        } catch (Exception e) {
            logger.error("Password reset initiation failed for email: {}", email, e);
            // Always return the generic message for security
            return ResponseEntity.ok(new MessageResponse(genericSuccessMessage));
        }
    }
    
    // ... other controller methods ...
}


package com.scgbs.rwtool.service;

import com.scgbs.rwtool.dto.ForgotPasswordRequest;
import com.scgbs.rwtool.dto.ForgotPasswordResponse;
import com.scgbs.rwtool.model.PasswordResetToken;
import com.scgbs.rwtool.model.User;
import com.scgbs.rwtool.repository.PasswordResetTokenRepository;
import com.scgbs.rwtool.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Service
public class ForgotPasswordService {

    private final UserRepository userRepository;
    private final PasswordResetTokenRepository tokenRepository;

    public ForgotPasswordService(UserRepository userRepository,
                                 PasswordResetTokenRepository tokenRepository) {
        this.userRepository = userRepository;
        this.tokenRepository = tokenRepository;
    }

    public ForgotPasswordResponse processForgotPassword(ForgotPasswordRequest request) {
        Optional<User> userOpt = userRepository.findByEmail(request.getEmail());
        if (userOpt.isEmpty()) {
            return new ForgotPasswordResponse("User not found with this email.");
        }

        User user = userOpt.get();
        String token = UUID.randomUUID().toString();

        PasswordResetToken resetToken = new PasswordResetToken();
        resetToken.setToken(token);
        resetToken.setUser(user);
        resetToken.setExpiryDate(LocalDateTime.now().plusMinutes(15));

        tokenRepository.save(resetToken);

        // You can integrate email service here, for now just simulate
        String resetLink = "http://localhost:3000/reset-password?token=" + token;
        System.out.println("Password reset link: " + resetLink);

        return new ForgotPasswordResponse("Reset link has been sent to your email!");
    }
}

package com.scgbs.rwtool.controller;

import com.scgbs.rwtool.dto.ForgotPasswordRequest;
import com.scgbs.rwtool.dto.ForgotPasswordResponse;
import com.scgbs.rwtool.service.ForgotPasswordService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
public class ForgotPasswordController {

    private final ForgotPasswordService forgotPasswordService;

    public ForgotPasswordController(ForgotPasswordService forgotPasswordService) {
        this.forgotPasswordService = forgotPasswordService;
    }

    @PostMapping("/forgot-password")
    public ResponseEntity<ForgotPasswordResponse> forgotPassword(
            @RequestBody ForgotPasswordRequest request) {
        ForgotPasswordResponse response = forgotPasswordService.processForgotPassword(request);
        return ResponseEntity.ok(response);
    }
}


package com.scgbs.rwtool.repository;

import com.scgbs.rwtool.model.PasswordResetToken;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PasswordResetTokenRepository extends JpaRepository<PasswordResetToken, Long> {
    PasswordResetToken findByToken(String token);
}



package com.scgbs.rwtool.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF for APIs
            .authorizeHttpRequests(auth -> auth
                // üëá Allow public endpoints
                .requestMatchers(
                    "/api/auth/login",
                    "/api/auth/register",
                    "/api/auth/forgot-password",   // ‚úÖ Add this line
                    "/api/auth/reset-password"      // (Optional for next step)
                ).permitAll()
                // Require authentication for all others
                .anyRequest().authenticated()
            );

        return http.build();
    }
}

package com.sgbs.rwtool.service;

import com.sgbs.rwtool.model.User;
import com.sgbs.rwtool.model.PasswordResetToken;
import com.sgbs.rwtool.repository.UserRepository;
import com.sgbs.rwtool.repository.PasswordResetTokenRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Service
public class ForgotPasswordService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordResetTokenRepository tokenRepository;

    public boolean processForgotPassword(String email) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isEmpty()) {
            return false;
        }

        User user = userOptional.get();

        // Generate random reset token
        String token = UUID.randomUUID().toString();

        // Create token entity
        PasswordResetToken resetToken = new PasswordResetToken();
        resetToken.setToken(token);
        resetToken.setUser(user);
        resetToken.setExpiryDate(LocalDateTime.now().plusMinutes(15));

        // Save token
        tokenRepository.save(resetToken);

        // For now, just print the token (you can later send email)
        System.out.println("Password reset token for " + email + ": " + token);

        return true;
    }
}
