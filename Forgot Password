import React, { useState } from 'react';

// Assuming you have a function to navigate back to the login page (e.g., using react-router-dom)
// const navigate = useNavigate();

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Functionality: Handles the form submission and API call
  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setIsLoading(true);

    // --- API Call Simulation ---
    try {
      // 1. Placeholder for your API call (e.g., Axios or Fetch)
      //    const response = await fetch('/api/forgot-password', {
      //      method: 'POST',
      //      headers: { 'Content-Type': 'application/json' },
      //      body: JSON.stringify({ email })
      //    });

      // Simulate network delay and successful response
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // In a real application, you'd check response.ok and handle errors
      
      setMessage('üìß We\'ve sent a password reset link to your email. Check your inbox!');
      setEmail(''); // Clear input on success

    } catch (error) {
      console.error('Password reset request failed:', error);
      // Display a generic error message for security (don't confirm if the email exists or not)
      setMessage('‚ùå We couldn\'t process your request right now. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    // Centering the card using Bootstrap utilities
    <div className="d-flex align-items-center justify-content-center" style={{ minHeight: '100vh', padding: '20px' }}>
      <div className="card shadow-lg p-4" style={{ maxWidth: '450px', width: '100%' }}>
        <div className="card-body">
          {/* Standard Chartered Logo placeholder */}
          <div className="text-center mb-4">
             {/* Replace with your actual logo component or image */}
             <img src="/standard-chartered-logo.svg" alt="Standard Chartered" style={{ height: '40px' }} />
          </div>
          
          <h4 className="card-title text-center mb-3">Forgot Password</h4>
          <p className="text-center text-muted mb-4 small">
            Enter your account's email address and we will send you a reset link.
          </p>

          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label htmlFor="emailInput" className="form-label">Email Address</label>
              <input
                type="email"
                className="form-control"
                id="emailInput"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>

            {/* Message Display (Success/Error) */}
            {message && (
              <div className={`alert ${message.startsWith('üìß') ? 'alert-success' : 'alert-danger'} text-center`} role="alert">
                {message}
              </div>
            )}

            <button 
              type="submit" 
              className="btn btn-primary w-100" 
              disabled={isLoading || !email}
            >
              {isLoading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  Sending Link...
                </>
              ) : (
                'Send Reset Link'
              )}
            </button>
          </form>

          <div className="text-center mt-3">
            {/* Link back to the login page */}
            <a href="/login" className="text-decoration-none">
              Back to Login
            </a>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;

/*
 * Assuming your main application is set up to use Bootstrap's grid and utilities.
 * This CSS focuses on centering the card and adjusting some visual elements.
 */

/* 1. Container Styling: Ensures the content takes up the full screen height and centers the card */
.forgot-password-page {
    /* Use flexbox to center content both horizontally and vertically */
    display: flex;
    justify-content: center;
    align-items: center;
    /* Set minimum height to viewport height */
    min-height: 100vh;
    /* Add a subtle background color if needed, or leave it white/transparent */
    background-color: #f8f9fa; /* Light gray background */
}

/* 2. Card/Form Styling: Applies to the Bootstrap 'card' element */
.forgot-password-card {
    /* Set a fixed maximum width for a desktop-friendly view */
    max-width: 450px;
    width: 100%;
    /* Add padding and shadow as done by Bootstrap, but you can customize it */
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Slightly stronger shadow than default Bootstrap */
    background-color: #ffffff; /* White background for the card */
    border: none;
}

/* 3. Logo Styling */
.logo-container {
    text-align: center;
    margin-bottom: 25px;
}

.logo-container img {
    /* Standard Chartered Green from the image is often a darker cyan/teal */
    height: 40px; 
}

/* 4. Button Styling (Optional: to match the Standard Chartered blue) */
/* This will override the default Bootstrap blue */
.btn-primary-sc {
    background-color: #006b5b !important; /* A deep teal/cyan color */
    border-color: #006b5b !important;
    font-weight: 600;
    padding: 10px 15px;
    transition: background-color 0.3s;
}

.btn-primary-sc:hover {
    background-color: #005a4a !important; /* Slightly darker on hover */
    border-color: #005a4a !important;
}

/* 5. Input Focus Styling (Optional: to match branding focus color) */
.form-control:focus {
    border-color: #006b5b; /* Use the brand color for focus outline */
    box-shadow: 0 0 0 0.25rem rgba(0, 107, 91, 0.25);
}

/* 6. Message Styling (Success/Error) */
.alert-success {
    background-color: #e6f7f3; /* Light green-teal background */
    color: #006b5b; /* Dark text */
    border-color: #b3e6d8;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border-color: #f5c6cb;
}
